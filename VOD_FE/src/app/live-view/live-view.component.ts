import { Component, AfterViewInit, OnDestroy, ViewChild, ElementRef, OnInit } from "@angular/core";
import { ActivatedRoute } from "@angular/router";
import { environment } from "src/environments/environment";

@Component({
  selector: "app-live-view",
  templateUrl: "./live-view.component.html",
  styleUrls: ["./live-view.component.scss"],
})
export class LiveViewComponent implements OnInit, AfterViewInit, OnDestroy {
  @ViewChild("live_video") video!: ElementRef<HTMLVideoElement>;
  @ViewChild("streaming") streaming_content!: ElementRef<HTMLHeadingElement>;

  private streamId: string = '';

  constructor(private route: ActivatedRoute) {}

  ngOnInit(): void {
    // Get stream ID from route params
    this.route.params.subscribe((params) => {
      this.streamId = params["id"];
      console.log("=== STREAM ID DEBUG ===");
      console.log("Route params:", params);
      console.log("Stream ID:", this.streamId);
    });

    // Fallback to query params
    this.route.queryParams.subscribe((params) => {
      console.log("Query params:", params);
      if (!this.streamId) {
        this.streamId = params["stream"];
        console.log("Stream ID from query:", this.streamId);
      }
    });
  }

  async ngAfterViewInit(): Promise<void> {
    console.log("=== LIVE VIEWER STARTING ===");
    console.log("Stream ID:", this.streamId);
    console.log("Current URL:", window.location.href);
    
    if (!this.streamId || this.streamId === 'undefined') {
      console.error("Invalid stream ID:", this.streamId);
      this.streaming_content.nativeElement.innerHTML = 'Invalid stream ID';
      return;
    }

    await this.startHLSViewing();
  }

  private async startHLSViewing() {
    // The HLS URL should be generated by your RTMP server
    const hlsUrl = `http://localhost:8000/live/${this.streamId}/index.m3u8`;
    
    console.log("=== HLS VIEWER ===");
    console.log("Attempting to play HLS stream:", hlsUrl);
    
    this.streaming_content.nativeElement.innerHTML = 'Connecting to stream...';

    // Test if the HLS stream exists
    try {
      const response = await fetch(hlsUrl);
      console.log("HLS URL response status:", response.status);
      
      if (!response.ok) {
        throw new Error(`Stream not available (${response.status})`);
      }
      
      console.log("HLS stream found, starting playback");
      this.setupHLSPlayer(hlsUrl);
      
    } catch (error) {
      console.error("HLS stream not available:", error);
      this.streaming_content.nativeElement.innerHTML = 
        `Stream not available. Make sure the broadcaster is streaming to: rtmp://localhost:1935/live/${this.streamId}`;
    }
  }

  private setupHLSPlayer(hlsUrl: string) {
    const video = this.video.nativeElement;
    
    console.log("Setting up HLS player with URL:", hlsUrl);

    // For Safari (native HLS support)
    if (video.canPlayType('application/vnd.apple.mpegurl')) {
      console.log("Using native HLS support");
      video.src = hlsUrl;
    } else {
      console.log("Native HLS not supported, trying direct assignment");
      video.src = hlsUrl;
    }

    // Set up event listeners
    video.addEventListener('loadstart', () => {
      console.log('Video: Load started');
      this.streaming_content.nativeElement.innerHTML = 'Loading stream...';
    });

    video.addEventListener('loadedmetadata', () => {
      console.log('Video: Metadata loaded');
    });

    video.addEventListener('canplay', () => {
      console.log('Video: Can play');
      this.streaming_content.nativeElement.innerHTML = '';
      video.play().catch(e => {
        console.error('Autoplay failed:', e);
        this.streaming_content.nativeElement.innerHTML = 'Click play to start stream';
      });
    });

    video.addEventListener('playing', () => {
      console.log('Video: Playing');
      this.streaming_content.nativeElement.innerHTML = '';
    });

    video.addEventListener('waiting', () => {
      console.log('Video: Waiting for data');
      this.streaming_content.nativeElement.innerHTML = 'Buffering...';
    });

    video.addEventListener('error', (e) => {
      console.error('Video error:', e);
      console.error('Video error details:', video.error);
      this.streaming_content.nativeElement.innerHTML = 
        'Stream error. Check if broadcaster is streaming.';
    });

    video.addEventListener('stalled', () => {
      console.log('Video: Stalled');
    });

    video.addEventListener('suspend', () => {
      console.log('Video: Suspended');
    });
  }

  ngOnDestroy() {
    console.log("Cleaning up live viewer");
    const video = this.video.nativeElement;
    if (video) {
      video.pause();
      video.src = '';
    }
  }
}